#!/bin/bash

# Script de d√©marrage pour l'environnement de production WK-Archi Linux
# Usage: ./start-production.sh

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
WHITE='\033[1;37m'
GRAY='\033[0;37m'
NC='\033[0m' # No Color

echo -e "${GREEN}üöÄ D√©marrage de la stack DevOps WK-Archi avec monitoring...${NC}"

# V√©rifier si Docker est install√© et en marche
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker n'est pas install√©${NC}"
    exit 1
fi

if ! docker info &> /dev/null; then
    echo -e "${RED}‚ùå Docker n'est pas en marche. D√©marrez le service Docker${NC}"
    echo -e "${YELLOW}   sudo systemctl start docker${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Docker est en marche${NC}"

# V√©rifier si Docker Compose est install√©
if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose n'est pas install√©${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Docker Compose est disponible${NC}"

# Se d√©placer dans le r√©pertoire du projet
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Cr√©er le r√©seau externe si n√©cessaire
echo -e "${YELLOW}üì° V√©rification du r√©seau tiptop-net...${NC}"
if ! docker network ls --filter name=tiptop-net --format "{{.Name}}" | grep -q "tiptop-net"; then
    echo -e "${YELLOW}üî® Cr√©ation du r√©seau tiptop-net...${NC}"
    docker network create tiptop-net
    echo -e "${GREEN}‚úÖ R√©seau tiptop-net cr√©√©${NC}"
else
    echo -e "${GREEN}‚úÖ R√©seau tiptop-net existe d√©j√†${NC}"
fi

# V√©rifier les fichiers de configuration
echo -e "${YELLOW}üîç V√©rification de la configuration...${NC}"

CONFIG_FILES=(
    "./monitoring/prometheus.yml"
    "./monitoring/alerts/rules.yml"
    "./grafana/provisioning/datasources/datasource.yml"
    "./grafana/provisioning/dashboards/dashboard.yml"
)

for file in "${CONFIG_FILES[@]}"; do
    if [[ -f "$file" ]]; then
        echo -e "${GREEN}‚úÖ $file${NC}"
    else
        echo -e "${RED}‚ùå $file manquant${NC}"
    fi
done

# Cr√©er les r√©pertoires n√©cessaires s'ils n'existent pas
echo -e "${YELLOW}üìÅ Cr√©ation des r√©pertoires n√©cessaires...${NC}"
mkdir -p ./data/registry
mkdir -p ./letsencrypt
mkdir -p ./monitoring/alerts
mkdir -p ./grafana/provisioning/datasources
mkdir -p ./grafana/provisioning/dashboards

# D√©finir les permissions appropri√©es pour letsencrypt
chmod 700 ./letsencrypt
touch ./letsencrypt/acme.json
chmod 600 ./letsencrypt/acme.json

echo -e "${GREEN}‚úÖ R√©pertoires configur√©s${NC}"

# Arr√™ter les services existants s'ils tournent
echo -e "${YELLOW}üõë Arr√™t des services existants...${NC}"
docker-compose down

# D√©marrer les services
echo -e "${YELLOW}üê≥ D√©marrage des conteneurs...${NC}"
docker-compose up -d

if [[ $? -eq 0 ]]; then
    echo -e "\n${GREEN}‚úÖ Tous les services ont √©t√© d√©marr√©s avec succ√®s!${NC}"
    
    # Attendre que les services soient pr√™ts
    echo -e "${YELLOW}‚è≥ Attente du d√©marrage des services (30s)...${NC}"
    sleep 30
    
    echo -e "\n${CYAN}üåê Vos services sont maintenant disponibles:${NC}"
    echo -e "${WHITE}  ‚Ä¢ Traefik Dashboard: https://traefik.wk-archi-o23b-4-5-g7.fr${NC}"
    echo -e "${WHITE}  ‚Ä¢ Jenkins: https://jenkins.wk-archi-o23b-4-5-g7.fr${NC}"
    echo -e "${WHITE}  ‚Ä¢ Gitea: https://gitea.wk-archi-o23b-4-5-g7.fr${NC}"
    echo -e "${WHITE}  ‚Ä¢ Registry: https://registry.wk-archi-o23b-4-5-g7.fr${NC}"
    echo -e "${MAGENTA}  ‚Ä¢ Prometheus: https://prometheus.wk-archi-o23b-4-5-g7.fr${NC}"
    echo -e "${MAGENTA}  ‚Ä¢ Grafana: https://grafana.wk-archi-o23b-4-5-g7.fr${NC}"
    echo -e "${GRAY}    ‚îî‚îÄ Identifiants: admin/admin${NC}"
    
    echo -e "\n${CYAN}üìä Services de monitoring locaux (sur le VPS):${NC}"
    echo -e "${WHITE}  ‚Ä¢ Prometheus: http://localhost:9090${NC}"
    echo -e "${WHITE}  ‚Ä¢ Grafana: http://localhost:3001${NC}"
    echo -e "${WHITE}  ‚Ä¢ Node Exporter: http://localhost:9100${NC}"
    echo -e "${WHITE}  ‚Ä¢ cAdvisor: http://localhost:8080${NC}"
    
    echo -e "\n${YELLOW}üîç V√©rification des targets Prometheus...${NC}"
    
    # V√©rifier l'√©tat des services
    echo -e "\n${CYAN}üìã √âtat des conteneurs:${NC}"
    docker-compose ps
    
    echo -e "\n${YELLOW}üéØ Prochaines √©tapes:${NC}"
    echo -e "${WHITE}  1. Acc√©dez √† Prometheus: https://prometheus.wk-archi-o23b-4-5-g7.fr/targets${NC}"
    echo -e "${GRAY}     ‚îî‚îÄ V√©rifiez que tous les targets sont 'UP'${NC}"
    echo -e "${WHITE}  2. Acc√©dez √† Grafana: https://grafana.wk-archi-o23b-4-5-g7.fr${NC}"
    echo -e "${GRAY}     ‚îî‚îÄ Connectez-vous avec admin/admin${NC}"
    echo -e "${GRAY}     ‚îî‚îÄ Le datasource Prometheus est pr√©-configur√©${NC}"
    echo -e "${WHITE}  3. Importez des dashboards recommand√©s:${NC}"
    echo -e "${GRAY}     ‚îî‚îÄ Node Exporter Full (ID: 1860)${NC}"
    echo -e "${GRAY}     ‚îî‚îÄ Docker Container Metrics (ID: 179)${NC}"
    echo -e "${GRAY}     ‚îî‚îÄ Traefik 2.0 Dashboard (ID: 11462)${NC}"
    
    echo -e "\n${RED}üö® IMPORTANT - S√©curit√©:${NC}"
    echo -e "${YELLOW}  ‚Ä¢ Changez le mot de passe Grafana par d√©faut (admin/admin)${NC}"
    echo -e "${YELLOW}  ‚Ä¢ V√©rifiez que vos certificats SSL sont bien g√©n√©r√©s${NC}"
    echo -e "${YELLOW}  ‚Ä¢ Configurez votre firewall pour prot√©ger les ports de monitoring${NC}"
    
else
    echo -e "${RED}‚ùå Erreur lors du d√©marrage des services${NC}"
    echo -e "${YELLOW}üìã V√©rifiez les logs avec: docker-compose logs${NC}"
    exit 1
fi

echo -e "\n${CYAN}üìñ Commandes utiles:${NC}"
echo -e "${WHITE}  ‚Ä¢ Voir les logs: docker-compose logs -f [service]${NC}"
echo -e "${WHITE}  ‚Ä¢ Arr√™ter: docker-compose down${NC}"
echo -e "${WHITE}  ‚Ä¢ Red√©marrer: docker-compose restart [service]${NC}"
echo -e "${WHITE}  ‚Ä¢ Status: docker-compose ps${NC}"

echo -e "\n${CYAN}üîß Scripts de gestion:${NC}"
echo -e "${WHITE}  ‚Ä¢ ./manage-stack.sh start|stop|restart|status|logs${NC}"
