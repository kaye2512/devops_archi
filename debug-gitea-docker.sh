#!/bin/bash

# Script de diagnostic sp√©cifique Gitea et Docker
# Usage: ./debug-gitea-docker.sh

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
WHITE='\033[1;37m'
NC='\033[0m'

echo -e "${BLUE}üîç Diagnostic Gitea et Docker Targets${NC}"
echo -e "${BLUE}====================================${NC}"

# V√©rification des ports utilis√©s sur l'h√¥te
echo -e "\n${CYAN}üîå V√©rification des ports sur l'h√¥te:${NC}"
echo -e "${WHITE}Port 3000 (votre application):${NC}"
if ss -tuln | grep -q ":3000 "; then
    port_3000_process=$(ss -tulnp | grep ":3000 " | head -1)
    echo -e "${YELLOW}  ‚ö†Ô∏è  Port 3000 utilis√©: $port_3000_process${NC}"
else
    echo -e "${GREEN}  ‚úÖ Port 3000 libre sur l'h√¥te${NC}"
fi

echo -e "${WHITE}Port 3001 (Grafana externe):${NC}"
if ss -tuln | grep -q ":3001 "; then
    echo -e "${GREEN}  ‚úÖ Port 3001 utilis√© (Grafana)${NC}"
else
    echo -e "${RED}  ‚ùå Port 3001 libre (Grafana pas accessible)${NC}"
fi

# V√©rification des conteneurs
echo -e "\n${CYAN}üì¶ √âtat des conteneurs:${NC}"

# Gitea
if docker ps --filter "name=gitea" --filter "status=running" | grep -q "gitea"; then
    echo -e "${GREEN}‚úÖ Gitea: En cours d'ex√©cution${NC}"
    
    # IP interne de Gitea
    gitea_ip=$(docker inspect gitea | grep -o '"IPAddress": "[^"]*"' | head -1 | cut -d'"' -f4)
    echo -e "${WHITE}   IP interne: $gitea_ip${NC}"
    
    # Ports expos√©s
    gitea_ports=$(docker inspect gitea | grep -A5 '"Ports"' | grep -o '"[0-9]*/tcp"' | tr -d '"')
    echo -e "${WHITE}   Ports internes: $gitea_ports${NC}"
    
    # Test de connectivit√© interne
    echo -e "${CYAN}üîç Test connectivit√© Gitea:${NC}"
    if docker exec prometheus nc -z gitea 3000 2>/dev/null; then
        echo -e "${GREEN}  ‚úÖ gitea:3000 accessible depuis Prometheus${NC}"
    else
        echo -e "${RED}  ‚ùå gitea:3000 NON accessible depuis Prometheus${NC}"
    fi
    
    # Test endpoint m√©triques
    echo -e "${CYAN}üîç Test endpoint m√©triques Gitea:${NC}"
    if docker exec prometheus wget -qO- "http://gitea:3000/metrics?token=prometheus-metrics-token" 2>/dev/null | head -1; then
        echo -e "${GREEN}  ‚úÖ M√©triques Gitea accessibles${NC}"
    else
        echo -e "${RED}  ‚ùå M√©triques Gitea NON accessibles${NC}"
        
        # Test sans token
        if docker exec prometheus wget -qO- "http://gitea:3000/metrics" 2>/dev/null | head -1; then
            echo -e "${YELLOW}  ‚ö†Ô∏è  M√©triques accessibles sans token${NC}"
        else
            echo -e "${RED}  ‚ùå Endpoint m√©triques compl√®tement inaccessible${NC}"
        fi
    fi
    
else
    echo -e "${RED}‚ùå Gitea: Non d√©marr√©${NC}"
fi

# V√©rification r√©seau Gitea
echo -e "\n${CYAN}üåê R√©seaux Gitea:${NC}"
if docker ps --filter "name=gitea" --filter "status=running" | grep -q "gitea"; then
    gitea_networks=$(docker inspect gitea | grep -A10 '"Networks"' | grep -o '"[^"]*":' | grep -v '"Networks":' | tr -d '":')
    echo -e "${WHITE}R√©seaux connect√©s: $gitea_networks${NC}"
    
    for network in $gitea_networks; do
        if [[ "$network" == "traefik-net" || "$network" == "tiptop-net" ]]; then
            echo -e "${GREEN}  ‚úÖ Connect√© √† $network${NC}"
        else
            echo -e "${GRAY}  ‚ÑπÔ∏è  Connect√© √† $network${NC}"
        fi
    done
fi

# Docker daemon
echo -e "\n${CYAN}üê≥ Docker Daemon Metrics:${NC}"

# V√©rifier la configuration Docker
if [[ -f /etc/docker/daemon.json ]]; then
    echo -e "${GREEN}‚úÖ Fichier de configuration Docker existe${NC}"
    
    if grep -q "metrics-addr" /etc/docker/daemon.json 2>/dev/null; then
        echo -e "${GREEN}‚úÖ M√©triques configur√©es dans daemon.json${NC}"
        metrics_addr=$(grep "metrics-addr" /etc/docker/daemon.json | cut -d'"' -f4)
        echo -e "${WHITE}   Adresse m√©triques: $metrics_addr${NC}"
    else
        echo -e "${RED}‚ùå M√©triques NON configur√©es dans daemon.json${NC}"
    fi
else
    echo -e "${RED}‚ùå Fichier daemon.json n'existe pas${NC}"
fi

# Test d'acc√®s aux m√©triques Docker
echo -e "${CYAN}üîç Test m√©triques Docker:${NC}"

# Test depuis l'h√¥te
if curl -s --max-time 5 http://localhost:9323/metrics > /dev/null 2>&1; then
    echo -e "${GREEN}  ‚úÖ M√©triques Docker accessibles depuis l'h√¥te (localhost:9323)${NC}"
else
    echo -e "${RED}  ‚ùå M√©triques Docker NON accessibles depuis l'h√¥te${NC}"
fi

# Test depuis Prometheus
if docker exec prometheus nc -z host.docker.internal 9323 2>/dev/null; then
    echo -e "${GREEN}  ‚úÖ host.docker.internal:9323 accessible depuis Prometheus${NC}"
else
    echo -e "${RED}  ‚ùå host.docker.internal:9323 NON accessible depuis Prometheus${NC}"
    
    # Essayer d'autres moyens d'acc√®s
    echo -e "${YELLOW}  üîç Test d'alternatives...${NC}"
    
    # Obtenir l'IP du bridge Docker
    docker_bridge_ip=$(docker network inspect bridge | jq -r '.[0].IPAM.Config[0].Gateway' 2>/dev/null)
    if [[ -n "$docker_bridge_ip" && "$docker_bridge_ip" != "null" ]]; then
        echo -e "${WHITE}     IP bridge Docker: $docker_bridge_ip${NC}"
        if docker exec prometheus nc -z $docker_bridge_ip 9323 2>/dev/null; then
            echo -e "${GREEN}     ‚úÖ $docker_bridge_ip:9323 accessible${NC}"
        fi
    fi
fi

# Solutions recommand√©es
echo -e "\n${BLUE}üí° Solutions Recommand√©es:${NC}"

echo -e "\n${YELLOW}ü¶å Pour Gitea:${NC}"
if ! docker exec prometheus nc -z gitea 3000 2>/dev/null; then
    echo -e "${WHITE}1. V√©rifier que Gitea et Prometheus sont sur le m√™me r√©seau:${NC}"
    echo -e "${GRAY}   docker network connect tiptop-net gitea${NC}"
    echo -e "${GRAY}   docker network connect tiptop-net prometheus${NC}"
fi

echo -e "${WHITE}2. V√©rifier la configuration Gitea app.ini:${NC}"
if docker exec gitea test -f /data/gitea/conf/app.ini; then
    metrics_config=$(docker exec gitea grep -A3 "\[metrics\]" /data/gitea/conf/app.ini 2>/dev/null || echo "")
    if [[ -z "$metrics_config" ]]; then
        echo -e "${RED}   ‚ùå Section [metrics] manquante${NC}"
        echo -e "${GRAY}   Solution: Ajouter dans app.ini:${NC}"
        echo -e "${GRAY}   [metrics]${NC}"
        echo -e "${GRAY}   ENABLED = true${NC}"
    else
        echo -e "${GREEN}   ‚úÖ Section [metrics] trouv√©e${NC}"
        echo -e "${GRAY}$metrics_config${NC}"
    fi
else
    echo -e "${YELLOW}   ‚ö†Ô∏è  app.ini pas encore g√©n√©r√© (premier d√©marrage de Gitea)${NC}"
fi

echo -e "\n${YELLOW}üê≥ Pour Docker:${NC}"
if ! curl -s --max-time 2 http://localhost:9323/metrics > /dev/null 2>&1; then
    echo -e "${WHITE}1. Configurer les m√©triques Docker:${NC}"
    echo -e "${GRAY}   sudo ./setup-docker-metrics.sh${NC}"
    echo -e "${WHITE}2. Ou manuellement:${NC}"
    echo -e "${GRAY}   sudo tee /etc/docker/daemon.json <<EOF${NC}"
    echo -e "${GRAY}   {${NC}"
    echo -e "${GRAY}     \"metrics-addr\": \"0.0.0.0:9323\",${NC}"
    echo -e "${GRAY}     \"experimental\": true${NC}"
    echo -e "${GRAY}   }${NC}"
    echo -e "${GRAY}   EOF${NC}"
    echo -e "${GRAY}   sudo systemctl restart docker${NC}"
else
    echo -e "${GREEN}‚úÖ M√©triques Docker d√©j√† configur√©es${NC}"
fi

echo -e "\n${CYAN}üìã R√©sum√© des Ports:${NC}"
echo -e "${WHITE}‚Ä¢ Gitea interne: 3000 (pas de conflit avec votre app)${NC}"
echo -e "${WHITE}‚Ä¢ Votre application: 3000 (externe, pas de conflit)${NC}"
echo -e "${WHITE}‚Ä¢ Grafana: 3000 interne ‚Üí 3001 externe${NC}"
echo -e "${WHITE}‚Ä¢ Docker m√©triques: 9323${NC}"

echo -e "\n${GREEN}üéØ Prochaines √©tapes:${NC}"
echo -e "${WHITE}1. Corriger les r√©seaux: ./manage-stack.sh fix-networks${NC}"
echo -e "${WHITE}2. Configurer Docker: sudo ./setup-docker-metrics.sh${NC}"  
echo -e "${WHITE}3. Red√©marrer: ./manage-stack.sh restart${NC}"
echo -e "${WHITE}4. V√©rifier: ./prometheus-debug.sh${NC}"
