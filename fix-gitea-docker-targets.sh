#!/bin/bash

# Script de r√©solution compl√®te pour Gitea et Docker targets
# Usage: ./fix-gitea-docker-targets.sh

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üéØ R√©solution Targets Gitea et Docker${NC}"
echo -e "${BLUE}====================================${NC}"

# Fonction de log avec timestamp
log() {
    echo -e "${CYAN}[$(date '+%H:%M:%S')] $1${NC}"
}

# √âtape 1: Diagnostic initial
log "üîç Diagnostic initial..."
./debug-gitea-docker.sh > debug-gitea-docker-before.log 2>&1

# √âtape 2: Corriger les r√©seaux
log "üåê Correction des r√©seaux Docker..."
if [[ -f "./manage-stack.sh" ]]; then
    ./manage-stack.sh fix-networks
else
    # Connecter manuellement les conteneurs aux r√©seaux
    docker network connect tiptop-net gitea 2>/dev/null || true
    docker network connect tiptop-net prometheus 2>/dev/null || true
    docker network connect traefik-net gitea 2>/dev/null || true
    docker network connect traefik-net prometheus 2>/dev/null || true
fi

# √âtape 3: Configuration Gitea
log "ü¶å Configuration des m√©triques Gitea..."
./setup-gitea-metrics.sh

# √âtape 4: Configuration Docker (n√©cessite sudo)
log "üê≥ V√©rification de la configuration Docker..."

if curl -s --max-time 2 http://localhost:9323/metrics > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ M√©triques Docker d√©j√† configur√©es${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  M√©triques Docker non configur√©es${NC}"
    
    if [[ $EUID -eq 0 ]]; then
        echo -e "${CYAN}üîß Configuration automatique des m√©triques Docker...${NC}"
        ./setup-docker-metrics.sh
    else
        echo -e "${YELLOW}üí° Ex√©cutez en tant que root pour configurer Docker automatiquement:${NC}"
        echo -e "${WHITE}   sudo ./fix-gitea-docker-targets.sh${NC}"
        echo -e "${WHITE}   # ou manuellement:${NC}"
        echo -e "${WHITE}   sudo ./setup-docker-metrics.sh${NC}"
        
        # Configuration manuelle rapide
        echo -e "\n${CYAN}üìã Configuration manuelle Docker:${NC}"
        cat << 'EOF'
sudo tee /etc/docker/daemon.json <<CONFIG
{
  "metrics-addr": "0.0.0.0:9323",
  "experimental": true,
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  }
}
CONFIG
sudo systemctl restart docker
EOF
    fi
fi

# √âtape 5: Red√©marrage des services
log "üîÑ Red√©marrage des services pour appliquer les configurations..."

# Red√©marrer seulement les services concern√©s
docker restart gitea
docker restart prometheus

# Attendre que les services se stabilisent
log "‚è≥ Attente de la stabilisation (20s)..."
sleep 20

# √âtape 6: V√©rification finale
log "‚úÖ V√©rification finale..."

echo -e "\n${CYAN}üß™ Tests de connectivit√©:${NC}"

# Test Gitea
if docker exec prometheus nc -z gitea 3000 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Gitea accessible depuis Prometheus${NC}"
    
    if docker exec prometheus wget -qO- "http://gitea:3000/metrics" 2>/dev/null | head -1 | grep -q "^#"; then
        echo -e "${GREEN}‚úÖ M√©triques Gitea fonctionnelles${NC}"
        gitea_status="UP"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  M√©triques Gitea pas encore pr√™tes${NC}"
        gitea_status="PENDING"
    fi
else
    echo -e "${RED}‚ùå Gitea non accessible${NC}"
    gitea_status="DOWN"
fi

# Test Docker
if curl -s --max-time 2 http://localhost:9323/metrics > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ M√©triques Docker accessibles${NC}"
    
    if docker exec prometheus nc -z host.docker.internal 9323 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Docker metrics accessibles depuis Prometheus${NC}"
        docker_status="UP"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Docker metrics pas accessibles depuis Prometheus${NC}"
        docker_status="PARTIAL"
    fi
else
    echo -e "${RED}‚ùå M√©triques Docker non configur√©es${NC}"
    docker_status="DOWN"
fi

# √âtape 7: Rapport final
echo -e "\n${BLUE}üìä RAPPORT FINAL${NC}"
echo -e "${BLUE}===============${NC}"

echo -e "\n${WHITE}Status des Targets:${NC}"
case $gitea_status in
    "UP") echo -e "${GREEN}üü¢ Gitea: UP${NC}" ;;
    "PENDING") echo -e "${YELLOW}üü° Gitea: PENDING (red√©marrez Prometheus)${NC}" ;;
    "DOWN") echo -e "${RED}üî¥ Gitea: DOWN${NC}" ;;
esac

case $docker_status in
    "UP") echo -e "${GREEN}üü¢ Docker: UP${NC}" ;;
    "PARTIAL") echo -e "${YELLOW}üü° Docker: PARTIAL (configuration r√©seau)${NC}" ;;
    "DOWN") echo -e "${RED}üî¥ Docker: DOWN (configuration requise)${NC}" ;;
esac

echo -e "\n${CYAN}üîç URLs de v√©rification:${NC}"
echo -e "${WHITE}‚Ä¢ Prometheus targets: https://prometheus.wk-archi-o23b-4-5-g7.fr/targets${NC}"
echo -e "${WHITE}‚Ä¢ Gitea: https://gitea.wk-archi-o23b-4-5-g7.fr${NC}"
echo -e "${WHITE}‚Ä¢ M√©triques Gitea direct: http://gitea:3000/metrics (dans r√©seau Docker)${NC}"
echo -e "${WHITE}‚Ä¢ M√©triques Docker: http://localhost:9323/metrics${NC}"

# Actions recommand√©es
echo -e "\n${YELLOW}‚è≠Ô∏è  Actions recommand√©es:${NC}"

if [[ "$gitea_status" != "UP" ]]; then
    echo -e "${WHITE}ü¶å Pour Gitea:${NC}"
    echo -e "${GRAY}   1. V√©rifiez l'interface Gitea: https://gitea.wk-archi-o23b-4-5-g7.fr${NC}"
    echo -e "${GRAY}   2. Terminez la configuration initiale si n√©cessaire${NC}"
    echo -e "${GRAY}   3. Red√©marrez: docker restart gitea prometheus${NC}"
fi

if [[ "$docker_status" != "UP" ]]; then
    echo -e "${WHITE}üê≥ Pour Docker:${NC}"
    if [[ $EUID -ne 0 ]]; then
        echo -e "${GRAY}   1. Ex√©cutez: sudo ./setup-docker-metrics.sh${NC}"
        echo -e "${GRAY}   2. Ou utilisez la configuration manuelle ci-dessus${NC}"
    else
        echo -e "${GRAY}   1. V√©rifiez les logs: journalctl -u docker.service${NC}"
        echo -e "${GRAY}   2. Testez: curl http://localhost:9323/metrics${NC}"
    fi
fi

# Sauvegarde du diagnostic
log "üíæ Sauvegarde du diagnostic final..."
./debug-gitea-docker.sh > debug-gitea-docker-after.log 2>&1

echo -e "\n${GREEN}üéâ Processus de r√©solution termin√© !${NC}"
echo -e "${CYAN}üìÑ Logs sauvegard√©s:${NC}"
echo -e "${WHITE}   ‚Ä¢ Avant: debug-gitea-docker-before.log${NC}"  
echo -e "${WHITE}   ‚Ä¢ Apr√®s: debug-gitea-docker-after.log${NC}"

# Proposition de commandes de v√©rification
echo -e "\n${CYAN}üß™ Commandes de v√©rification:${NC}"
echo -e "${WHITE}# V√©rifier les targets Prometheus${NC}"
echo -e "${GRAY}curl -s http://localhost:9090/api/v1/targets | jq '.data.activeTargets[] | {job: .labels.job, health: .health}'${NC}"

echo -e "\n${WHITE}# Tester manuellement les endpoints${NC}"
echo -e "${GRAY}docker exec prometheus wget -qO- http://gitea:3000/metrics | head -5${NC}"
echo -e "${GRAY}curl -s http://localhost:9323/metrics | head -5${NC}"

# Note sur les ports
echo -e "\n${BLUE}üìã Note sur les Ports:${NC}"
echo -e "${WHITE}‚úÖ Pas de conflit de port 3000:${NC}"
echo -e "${GRAY}   ‚Ä¢ Votre application: Port 3000 externe${NC}"
echo -e "${GRAY}   ‚Ä¢ Gitea: Port 3000 interne au conteneur (via r√©seau Docker)${NC}"
echo -e "${GRAY}   ‚Ä¢ Grafana: Port 3000 interne ‚Üí 3001 externe${NC}"
echo -e "${WHITE}   ‚Üí Tout fonctionne en parall√®le sans conflit !${NC}"
